{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst usersAdapter = createEntityAdapter({});\nconst initialState = usersAdapter.getInitialState();\nexport const userApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getUsers: builder.query({\n      query: () => '/users',\n      validateStatus: (response, result) => {\n        return response.status === 200 && !error.isError;\n      },\n      keepUnusedDataFor: 5,\n      transformResponse: responseData => {\n        const loadedUsers = responseData.map(user => {\n          user.id = user._id;\n          return user;\n        });\n        return usersAdapter.setAll(initialState, loadedUsers);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'User',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'User',\n            id\n          }))];\n        } else return [{\n          type: 'User',\n          id: 'LIST'\n        }];\n      }\n    })\n  })\n});\nexport const {\n  usrGetUsersQuery\n} = userApiSlice;\n\n// returns the query result object\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select();\n\n// creates momoized selector\nexport const selectUserData = createSelector(selectUsersResult, userResult => userResult.data // normalized state object with ids & entities\n);\n\n// getSelectors creates these selectors and we rename them with aliases using destructuring \nexport const {\n  selectAll: selectAllUsers,\n  selectById: selectUserById,\n  selectIds: selectUsersIds\n  // Pass in a selector that returns the users slice of state\n} = usersAdapter.getSelectors(state => {\n  var _selectUserData;\n  return (_selectUserData = selectUserData(state)) !== null && _selectUserData !== void 0 ? _selectUserData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","usersAdapter","initialState","getInitialState","userApiSlice","injectEndpoints","endpoints","builder","getUsers","query","validateStatus","response","result","status","error","isError","keepUnusedDataFor","transformResponse","responseData","loadedUsers","map","user","id","_id","setAll","providesTags","arg","ids","type","usrGetUsersQuery","selectUsersResult","usersApiSlice","select","selectUserData","userResult","data","selectAll","selectAllUsers","selectById","selectUserById","selectIds","selectUsersIds","getSelectors","state","_selectUserData"],"sources":["/home/aryant/Codes/mern_project/frontend/src/featueres/users/usersApiSlice.js"],"sourcesContent":["import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\"\nimport { apiSlice } from \"../../app/api/apiSlice\"\n\nconst usersAdapter = createEntityAdapter({})\nconst initialState = usersAdapter.getInitialState()\n\nexport const userApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        getUsers: builder.query({\n            query: () => '/users',\n            validateStatus: (response, result) => {\n                return response.status === 200 && !error.isError\n            },\n            keepUnusedDataFor: 5,\n            transformResponse: responseData => {\n                const loadedUsers = responseData.map(user => {\n                    user.id = user._id\n                    return user\n                });\n                return usersAdapter.setAll(initialState, loadedUsers)\n            }, \n            providesTags: (result, error, arg) => {\n                if (result?.ids) {\n                    return [\n                        { type: 'User', id: 'LIST'},\n                        ...result.ids.map(id => ({ type: 'User', id}))\n                    ]\n                } else return [{ type: 'User', id: 'LIST'}]\n            }\n        }),\n    }),\n})\nexport const {\n    usrGetUsersQuery,\n} = userApiSlice \n\n// returns the query result object\nexport const selectUsersResult = usersApiSlice.endpoints.getUsers.select()\n\n// creates momoized selector\nexport const selectUserData = createSelector(\n    selectUsersResult,\n    userResult => userResult.data // normalized state object with ids & entities\n)\n\n// getSelectors creates these selectors and we rename them with aliases using destructuring \nexport const {\n    selectAll: selectAllUsers,\n    selectById: selectUserById,\n    selectIds: selectUsersIds\n    // Pass in a selector that returns the users slice of state\n} = usersAdapter.getSelectors(state => selectUserData(state) ?? initialState) "],"mappings":"AAAA,SAASA,cAAc,EAAEC,mBAAmB,QAAQ,kBAAkB;AACtE,SAASC,QAAQ,QAAQ,wBAAwB;AAEjD,MAAMC,YAAY,GAAGF,mBAAmB,CAAC,CAAC,CAAC,CAAC;AAC5C,MAAMG,YAAY,GAAGD,YAAY,CAACE,eAAe,CAAC,CAAC;AAEnD,OAAO,MAAMC,YAAY,GAAGJ,QAAQ,CAACK,eAAe,CAAC;EACjDC,SAAS,EAAEC,OAAO,KAAK;IACnBC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAC;MACpBA,KAAK,EAAEA,CAAA,KAAM,QAAQ;MACrBC,cAAc,EAAEA,CAACC,QAAQ,EAAEC,MAAM,KAAK;QAClC,OAAOD,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACC,KAAK,CAACC,OAAO;MACpD,CAAC;MACDC,iBAAiB,EAAE,CAAC;MACpBC,iBAAiB,EAAEC,YAAY,IAAI;QAC/B,MAAMC,WAAW,GAAGD,YAAY,CAACE,GAAG,CAACC,IAAI,IAAI;UACzCA,IAAI,CAACC,EAAE,GAAGD,IAAI,CAACE,GAAG;UAClB,OAAOF,IAAI;QACf,CAAC,CAAC;QACF,OAAOpB,YAAY,CAACuB,MAAM,CAACtB,YAAY,EAAEiB,WAAW,CAAC;MACzD,CAAC;MACDM,YAAY,EAAEA,CAACb,MAAM,EAAEE,KAAK,EAAEY,GAAG,KAAK;QAClC,IAAId,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEe,GAAG,EAAE;UACb,OAAO,CACH;YAAEC,IAAI,EAAE,MAAM;YAAEN,EAAE,EAAE;UAAM,CAAC,EAC3B,GAAGV,MAAM,CAACe,GAAG,CAACP,GAAG,CAACE,EAAE,KAAK;YAAEM,IAAI,EAAE,MAAM;YAAEN;UAAE,CAAC,CAAC,CAAC,CACjD;QACL,CAAC,MAAM,OAAO,CAAC;UAAEM,IAAI,EAAE,MAAM;UAAEN,EAAE,EAAE;QAAM,CAAC,CAAC;MAC/C;IACJ,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AACF,OAAO,MAAM;EACTO;AACJ,CAAC,GAAGzB,YAAY;;AAEhB;AACA,OAAO,MAAM0B,iBAAiB,GAAGC,aAAa,CAACzB,SAAS,CAACE,QAAQ,CAACwB,MAAM,CAAC,CAAC;;AAE1E;AACA,OAAO,MAAMC,cAAc,GAAGnC,cAAc,CACxCgC,iBAAiB,EACjBI,UAAU,IAAIA,UAAU,CAACC,IAAI,CAAC;AAClC,CAAC;;AAED;AACA,OAAO,MAAM;EACTC,SAAS,EAAEC,cAAc;EACzBC,UAAU,EAAEC,cAAc;EAC1BC,SAAS,EAAEC;EACX;AACJ,CAAC,GAAGxC,YAAY,CAACyC,YAAY,CAACC,KAAK;EAAA,IAAAC,eAAA;EAAA,QAAAA,eAAA,GAAIX,cAAc,CAACU,KAAK,CAAC,cAAAC,eAAA,cAAAA,eAAA,GAAI1C,YAAY;AAAA,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}