{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nconst notesAdapter = createEntityAdapter({});\nconst initialState = notesAdapter.getInitialState();\nexport const notesApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getNotes: builder.query({\n      query: () => '/notes',\n      validateStatus: (response, result) => {\n        return response.status === 200 && !error.isError;\n      },\n      keepUnusedDataFor: 5,\n      transformResponse: responseData => {\n        const loadedNotes = responseData.map(note => {\n          note.id = note._id;\n          return note;\n        });\n        return notesAdapter.setAll(initialState, loadedNotes);\n      },\n      providesTags: (result, error, arg) => {\n        if (result !== null && result !== void 0 && result.ids) {\n          return [{\n            type: 'Note',\n            id: 'LIST'\n          }, ...result.ids.map(id => ({\n            type: 'Note',\n            id\n          }))];\n        } else return [{\n          type: 'Note',\n          id: 'LIST'\n        }];\n      }\n    })\n  })\n});\nexport const {\n  usrGetNotesQuery\n} = noteApiSlice;\n\n// returns the query result object\nexport const selectNotesResult = notesApiSlice.endpoints.getNotes.select();\n\n// creates momoized selector\nexport const selectNoteData = createSelector(selectNotesResult, noteResult => noteResult.data // normalized state object with ids & entities\n);\n\n// getSelectors creates these selectors and we rename them with aliases using destructuring \nexport const {\n  selectAll: selectAllNotes,\n  selectById: selectNoteById,\n  selectIds: selectNotesIds\n  // Pass in a selector that returns the notes slice of state\n} = notesAdapter.getSelectors(state => {\n  var _selectNoteData;\n  return (_selectNoteData = selectNoteData(state)) !== null && _selectNoteData !== void 0 ? _selectNoteData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","notesAdapter","initialState","getInitialState","notesApiSlice","injectEndpoints","endpoints","builder","getNotes","query","validateStatus","response","result","status","error","isError","keepUnusedDataFor","transformResponse","responseData","loadedNotes","map","note","id","_id","setAll","providesTags","arg","ids","type","usrGetNotesQuery","noteApiSlice","selectNotesResult","select","selectNoteData","noteResult","data","selectAll","selectAllNotes","selectById","selectNoteById","selectIds","selectNotesIds","getSelectors","state","_selectNoteData"],"sources":["/home/aryant/Codes/mern_project/frontend/src/featueres/notes/notesApiSlice.js"],"sourcesContent":["import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\"\nimport { apiSlice } from \"../../app/api/apiSlice\"\n\nconst notesAdapter = createEntityAdapter({})\nconst initialState = notesAdapter.getInitialState()\n\nexport const notesApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        getNotes: builder.query({\n            query: () => '/notes',\n            validateStatus: (response, result) => {\n                return response.status === 200 && !error.isError\n            },\n            keepUnusedDataFor: 5,\n            transformResponse: responseData => {\n                const loadedNotes = responseData.map(note => {\n                    note.id = note._id\n                    return note\n                });\n                return notesAdapter.setAll(initialState, loadedNotes)\n            }, \n            providesTags: (result, error, arg) => {\n                if (result?.ids) {\n                    return [\n                        { type: 'Note', id: 'LIST'},\n                        ...result.ids.map(id => ({ type: 'Note', id}))\n                    ]\n                } else return [{ type: 'Note', id: 'LIST'}]\n            }\n        }),\n    }),\n})\nexport const {\n    usrGetNotesQuery,\n} = noteApiSlice \n\n// returns the query result object\nexport const selectNotesResult = notesApiSlice.endpoints.getNotes.select()\n\n// creates momoized selector\nexport const selectNoteData = createSelector(\n    selectNotesResult,\n    noteResult => noteResult.data // normalized state object with ids & entities\n)\n\n// getSelectors creates these selectors and we rename them with aliases using destructuring \nexport const {\n    selectAll: selectAllNotes,\n    selectById: selectNoteById,\n    selectIds: selectNotesIds\n    // Pass in a selector that returns the notes slice of state\n} = notesAdapter.getSelectors(state => selectNoteData(state) ?? initialState)  "],"mappings":"AAAA,SAASA,cAAc,EAAEC,mBAAmB,QAAQ,kBAAkB;AACtE,SAASC,QAAQ,QAAQ,wBAAwB;AAEjD,MAAMC,YAAY,GAAGF,mBAAmB,CAAC,CAAC,CAAC,CAAC;AAC5C,MAAMG,YAAY,GAAGD,YAAY,CAACE,eAAe,CAAC,CAAC;AAEnD,OAAO,MAAMC,aAAa,GAAGJ,QAAQ,CAACK,eAAe,CAAC;EAClDC,SAAS,EAAEC,OAAO,KAAK;IACnBC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAC;MACpBA,KAAK,EAAEA,CAAA,KAAM,QAAQ;MACrBC,cAAc,EAAEA,CAACC,QAAQ,EAAEC,MAAM,KAAK;QAClC,OAAOD,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACC,KAAK,CAACC,OAAO;MACpD,CAAC;MACDC,iBAAiB,EAAE,CAAC;MACpBC,iBAAiB,EAAEC,YAAY,IAAI;QAC/B,MAAMC,WAAW,GAAGD,YAAY,CAACE,GAAG,CAACC,IAAI,IAAI;UACzCA,IAAI,CAACC,EAAE,GAAGD,IAAI,CAACE,GAAG;UAClB,OAAOF,IAAI;QACf,CAAC,CAAC;QACF,OAAOpB,YAAY,CAACuB,MAAM,CAACtB,YAAY,EAAEiB,WAAW,CAAC;MACzD,CAAC;MACDM,YAAY,EAAEA,CAACb,MAAM,EAAEE,KAAK,EAAEY,GAAG,KAAK;QAClC,IAAId,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEe,GAAG,EAAE;UACb,OAAO,CACH;YAAEC,IAAI,EAAE,MAAM;YAAEN,EAAE,EAAE;UAAM,CAAC,EAC3B,GAAGV,MAAM,CAACe,GAAG,CAACP,GAAG,CAACE,EAAE,KAAK;YAAEM,IAAI,EAAE,MAAM;YAAEN;UAAE,CAAC,CAAC,CAAC,CACjD;QACL,CAAC,MAAM,OAAO,CAAC;UAAEM,IAAI,EAAE,MAAM;UAAEN,EAAE,EAAE;QAAM,CAAC,CAAC;MAC/C;IACJ,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AACF,OAAO,MAAM;EACTO;AACJ,CAAC,GAAGC,YAAY;;AAEhB;AACA,OAAO,MAAMC,iBAAiB,GAAG3B,aAAa,CAACE,SAAS,CAACE,QAAQ,CAACwB,MAAM,CAAC,CAAC;;AAE1E;AACA,OAAO,MAAMC,cAAc,GAAGnC,cAAc,CACxCiC,iBAAiB,EACjBG,UAAU,IAAIA,UAAU,CAACC,IAAI,CAAC;AAClC,CAAC;;AAED;AACA,OAAO,MAAM;EACTC,SAAS,EAAEC,cAAc;EACzBC,UAAU,EAAEC,cAAc;EAC1BC,SAAS,EAAEC;EACX;AACJ,CAAC,GAAGxC,YAAY,CAACyC,YAAY,CAACC,KAAK;EAAA,IAAAC,eAAA;EAAA,QAAAA,eAAA,GAAIX,cAAc,CAACU,KAAK,CAAC,cAAAC,eAAA,cAAAA,eAAA,GAAI1C,YAAY;AAAA,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}